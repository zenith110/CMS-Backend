package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"

	"github.com/zenith110/CMS-Backend/graph/model"
	"github.com/zenith110/CMS-Backend/graph/routes"
)

// CreateArticle is the resolver for the createArticle field.
func (r *mutationResolver) CreateArticle(ctx context.Context, input *model.CreateArticleInfo) (*model.Article, error) {
	article, err := routes.CreateArticle(input)
	return article, err
}

// UpdateArticle is the resolver for the updateArticle field.
func (r *mutationResolver) UpdateArticle(ctx context.Context, input *model.UpdatedArticleInfo) (*model.Article, error) {
	article, err := routes.UpdateArticle(input)
	return article, err
}

// DeleteArticle is the resolver for the deleteArticle field.
func (r *mutationResolver) DeleteArticle(ctx context.Context, input *model.DeleteBucketInfo) (*model.Article, error) {
	article, err := routes.DeleteArticle(input)
	return article, err
}

// DeleteAllArticles is the resolver for the deleteAllArticles field.
func (r *mutationResolver) DeleteAllArticles(ctx context.Context) (*model.Article, error) {
	article, err := routes.DeleteArticles()
	return article, err
}

// CreateProject is the resolver for the createProject field.
func (r *mutationResolver) CreateProject(ctx context.Context, input *model.CreateProjectInput) (*model.Project, error) {
	panic(fmt.Errorf("not implemented: CreateProject - createProject"))
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input *model.UserCreation) (*model.User, error) {
	user, err := routes.CreateUser(input)
	return user, err
}

// LoginUser is the resolver for the loginUser field.
func (r *mutationResolver) LoginUser(ctx context.Context, email string, password string) (*model.Jwt, error) {
	panic(fmt.Errorf("not implemented: LoginUser - loginUser"))
}

// Article is the resolver for the article field.
func (r *queryResolver) Article(ctx context.Context, title string, jwt string) (*model.Article, error) {
	article, err := routes.FindArticle(&title, &jwt)
	return article, err
}

// Articles is the resolver for the articles field.
func (r *queryResolver) Articles(ctx context.Context, jwt string) (*model.Articles, error) {
	articles, err := routes.FetchArticles(&jwt)
	return articles, err
}

// Zincarticles is the resolver for the zincarticles field.
func (r *queryResolver) Zincarticles(ctx context.Context, keyword string, jwt string) (*model.Articles, error) {
	articles, err := routes.FetchArticlesZinc(keyword, jwt)
	return articles, err
}

// GetGalleryImages is the resolver for the getGalleryImages field.
func (r *queryResolver) GetGalleryImages(ctx context.Context, jwt string) (*model.GalleryImages, error) {
	images, err := routes.GalleryFindImages()
	return images, err
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
