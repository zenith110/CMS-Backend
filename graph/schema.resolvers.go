package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.26

import (
	"context"
	"fmt"

	"github.com/zenith110/CMS-Backend/graph/model"
	"github.com/zenith110/CMS-Backend/graph/routes"
)

// CreateArticle is the resolver for the createArticle field.
func (r *mutationResolver) CreateArticle(ctx context.Context, input *model.CreateArticleInfo) (*model.Article, error) {
	article, err := routes.CreateArticle(input)
	return article, err
}

// UpdateArticle is the resolver for the updateArticle field.
func (r *mutationResolver) UpdateArticle(ctx context.Context, input *model.UpdatedArticleInfo) (*model.Article, error) {
	article, err := routes.UpdateArticle(input)
	return article, err
}

// DeleteArticle is the resolver for the deleteArticle field.
func (r *mutationResolver) DeleteArticle(ctx context.Context, input *model.DeleteBucketInfo) (string, error) {
	_, err := routes.DeleteArticle(input)
	return "", err
}

// DeleteAllArticles is the resolver for the deleteAllArticles field.
func (r *mutationResolver) DeleteAllArticles(ctx context.Context, input *model.DeleteAllArticlesInput) (string, error) {
	_, err := routes.DeleteArticles(input)
	return "", err
}

// CreateProject is the resolver for the createProject field.
func (r *mutationResolver) CreateProject(ctx context.Context, input *model.CreateProjectInput) (*model.Project, error) {
	project, err := routes.CreateProject(input)
	return project, err
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input *model.UserCreation) (*model.User, error) {
	user, err := routes.CreateUser(input)
	return user, err
}

// LoginUser is the resolver for the loginUser field.
func (r *mutationResolver) LoginUser(ctx context.Context, username string, password string) (string, error) {
	jwt, err := routes.Login(username, password)
	return jwt, err
}

// DeleteProject is the resolver for the deleteProject field.
func (r *mutationResolver) DeleteProject(ctx context.Context, input *model.DeleteProjectType) (string, error) {
	message, err := routes.DeleteProject(input)
	return message, err
}

// DeleteProjects is the resolver for the deleteProjects field.
func (r *mutationResolver) DeleteProjects(ctx context.Context, input *model.DeleteAllProjects) (string, error) {
	result, err := routes.DeleteProjects(input)
	return result, err
}

// Logout is the resolver for the logout field.
func (r *mutationResolver) Logout(ctx context.Context, jwt string) (string, error) {
	result, err := routes.Logout(jwt)
	return result, err
}

// ArticlePrivate is the resolver for the articlePrivate field.
func (r *queryResolver) ArticlePrivate(ctx context.Context, input *model.FindArticlePrivateType) (*model.Article, error) {
	article, err := routes.FindArticle(input)
	return article, err
}

// ArticlesPrivate is the resolver for the articlesPrivate field.
func (r *queryResolver) ArticlesPrivate(ctx context.Context, input *model.ArticlesPrivate) (*model.Articles, error) {
	articles, err := routes.FetchArticles(input)
	return articles, err
}

// ArticlesPublic is the resolver for the articlesPublic field.
func (r *queryResolver) ArticlesPublic(ctx context.Context, input *model.GetZincArticleInput) (*model.Articles, error) {
	panic(fmt.Errorf("not implemented: ArticlesPublic - articlesPublic"))
}

// GetGalleryImages is the resolver for the getGalleryImages field.
func (r *queryResolver) GetGalleryImages(ctx context.Context, jwt string) (*model.GalleryImages, error) {
	images, err := routes.GalleryFindImages(jwt)
	return images, err
}

// GetProjects is the resolver for the getProjects field.
func (r *queryResolver) GetProjects(ctx context.Context, input *model.GetProjectType) (*model.Projects, error) {
	projects, err := routes.GetProjects(input)
	return projects, err
}

// ArticlePublic is the resolver for the articlePublic field.
func (r *queryResolver) ArticlePublic(ctx context.Context, input *model.FindArticlePublicType) (*model.Article, error) {
	panic(fmt.Errorf("not implemented: ArticlePublic - articlePublic"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
